def find_next_empty(puzzle):
    for r in range(9):
        for c in range(9):
            if puzzle[r][c] == 0:
                return r, c

    return None, None  

def is_valid(puzzle, guess, row, col):
    row_vals = puzzle[row]
    if guess in row_vals:
        return False 

    col_vals = [puzzle[i][col] for i in range(9)]
    if guess in col_vals:
        return False

    row_start = (row // 3) * 3 
    col_start = (col // 3) * 3

    for r in range(row_start, row_start + 3):
        for c in range(col_start, col_start + 3):
            if puzzle[r][c] == guess:
                return False

    return True

def solve_sudoku(puzzle):
    row, col = find_next_empty(puzzle)
    if row is None:  
        return True 
    
    for guess in range(1, 10): 
        if is_valid(puzzle, guess, row, col):
            puzzle[row][col] = guess
            if solve_sudoku(puzzle):
                return True
        puzzle[row][col] = 0
    return False

def printing(puzzle):
    for i in range(9):
        for j in range(9):
            print(puzzle[i][j],end = " ")
        print()

if __name__ == '__main__':
    a = input("Enter the Sudoku Problem")
    puzzle = []
    count = 0
    for i in range(9):
        line = []
        for j in range(9):
            line.append(int(a[count]))
            count+=1
        puzzle.append(line)

    print("Sudoku Problem : ")
    printing(puzzle)
    
    print("Can the Sudoku problem be solved ? : " ,solve_sudoku(puzzle))
    if(solve_sudoku(puzzle)):
        print("Sudoku Solved: ")
        printing(puzzle)
